//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EldredBrown.ProFootball.WpfApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProFootballEntities : DbContext
    {
        public ProFootballEntities()
            : base("name=ProFootballEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Conference> Conferences { get; set; }
        public virtual DbSet<Division> Divisions { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<League> Leagues { get; set; }
        public virtual DbSet<LeagueSeason> LeagueSeasons { get; set; }
        public virtual DbSet<Season> Seasons { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamSeason> TeamSeasons { get; set; }
        public virtual DbSet<WeekCount> WeekCounts { get; set; }
    
        public virtual ObjectResult<GetLeagueSeasonTotals_Result> GetLeagueSeasonTotals(string leagueName, Nullable<int> seasonID)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("leagueName", leagueName) :
                new ObjectParameter("leagueName", typeof(string));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeagueSeasonTotals_Result>("GetLeagueSeasonTotals", leagueNameParameter, seasonIDParameter);
        }
    
        public virtual ObjectResult<GetRankingsDefensive_Result> GetRankingsDefensive(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRankingsDefensive_Result>("GetRankingsDefensive", seasonIDParameter);
        }
    
        public virtual ObjectResult<GetRankingsOffensive_Result> GetRankingsOffensive(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRankingsOffensive_Result>("GetRankingsOffensive", seasonIDParameter);
        }
    
        public virtual ObjectResult<GetRankingsTotal_Result> GetRankingsTotal(Nullable<int> seasonID)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRankingsTotal_Result>("GetRankingsTotal", seasonIDParameter);
        }
    
        public virtual ObjectResult<GetSeasonStandingsForConference_Result> GetSeasonStandingsForConference(Nullable<int> seasonID, string conferenceName)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            var conferenceNameParameter = conferenceName != null ?
                new ObjectParameter("conferenceName", conferenceName) :
                new ObjectParameter("conferenceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeasonStandingsForConference_Result>("GetSeasonStandingsForConference", seasonIDParameter, conferenceNameParameter);
        }
    
        public virtual ObjectResult<GetSeasonStandingsForDivision_Result> GetSeasonStandingsForDivision(Nullable<int> seasonID, string divisionName)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("divisionName", divisionName) :
                new ObjectParameter("divisionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeasonStandingsForDivision_Result>("GetSeasonStandingsForDivision", seasonIDParameter, divisionNameParameter);
        }
    
        public virtual ObjectResult<GetTeamSeasonScheduleAverages_Result> GetTeamSeasonScheduleAverages(string teamName, Nullable<int> seasonID)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("teamName", teamName) :
                new ObjectParameter("teamName", typeof(string));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeamSeasonScheduleAverages_Result>("GetTeamSeasonScheduleAverages", teamNameParameter, seasonIDParameter);
        }
    
        public virtual ObjectResult<GetTeamSeasonScheduleProfile_Result> GetTeamSeasonScheduleProfile(string teamName, Nullable<int> seasonID)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("teamName", teamName) :
                new ObjectParameter("teamName", typeof(string));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeamSeasonScheduleProfile_Result>("GetTeamSeasonScheduleProfile", teamNameParameter, seasonIDParameter);
        }
    
        public virtual ObjectResult<GetTeamSeasonScheduleTotals_Result> GetTeamSeasonScheduleTotals(string teamName, Nullable<int> seasonID)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("teamName", teamName) :
                new ObjectParameter("teamName", typeof(string));
    
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeamSeasonScheduleTotals_Result>("GetTeamSeasonScheduleTotals", teamNameParameter, seasonIDParameter);
        }
    
        public virtual ObjectResult<GetSeasonStandings_Result> GetSeasonStandings(Nullable<int> seasonID, Nullable<bool> groupByDivision)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            var groupByDivisionParameter = groupByDivision.HasValue ?
                new ObjectParameter("groupByDivision", groupByDivision) :
                new ObjectParameter("groupByDivision", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeasonStandings_Result>("GetSeasonStandings", seasonIDParameter, groupByDivisionParameter);
        }
    
        public virtual ObjectResult<GetSeasonStandingsForLeague_Result> GetSeasonStandingsForLeague(Nullable<int> seasonID, string leagueName)
        {
            var seasonIDParameter = seasonID.HasValue ?
                new ObjectParameter("seasonID", seasonID) :
                new ObjectParameter("seasonID", typeof(int));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("leagueName", leagueName) :
                new ObjectParameter("leagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSeasonStandingsForLeague_Result>("GetSeasonStandingsForLeague", seasonIDParameter, leagueNameParameter);
        }
    }
}
